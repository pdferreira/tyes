package tyes.cli

import example.*
import utils.StringExtensions.*

class LExpressionWithCompiledTypesParser[T](types: Set[T]) extends LExpressionParser[T]:

  override def tpe: Parser[T] =
    // T is assumed to be a Type enum value, as generated by the compiler
    // TODO: review approach to be type safe if possible (<: enum value?)
    // For sure it will have to change when composite types are added
    types.foldLeft[Parser[T]](failure("Unrecognized type")) { (prevParser, typ) =>
      prevParser | (literal(typ.toString.decapitalize) ~> success(typ))
    }
